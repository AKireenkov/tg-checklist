from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from BaseBot import BaseBot


class ServiceBot(BaseBot):
    MAIN_CHECKLIST = [
        "–†–µ–ª–∏–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Test",
        "–†–µ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π QA ES",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π QA –ê–ë",
        "–†–µ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π QA –ê–ë",
        "–†–µ–ª–∏–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Test 2",
        "–†–µ–ª–∏–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Dev",
        "–†–µ–ª–∏–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Prod",
    ]

    STATUS_ICONS = {
        None: "‚¨úÔ∏è",  # –ù–µ –≤—ã–±—Ä–∞–Ω–æ
        "in_progress": "‚öôÔ∏è",  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ
        "passed": "‚úÖ",  # –£—Å–ø–µ—à–Ω–æ
        "failed": "‚ùå"  # –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ
    }

    def __init__(self, application):
        super().__init__(application)
        self.session = {
            "main_checklist": [None] * len(self.MAIN_CHECKLIST),
        }

    def generate_keyboard(self, checklist, statuses, prefix):
        keyboard = [
            [InlineKeyboardButton(f"{self.STATUS_ICONS[statuses[i]]} {item}", callback_data=f"{prefix}_{i}")]
            for i, item in enumerate(checklist)
        ]
        return InlineKeyboardMarkup(keyboard)

    async def help(self, update: Update, context: CallbackContext):
        commands = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
                    "/check - –ó–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç\n"
                    "/restart - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞\n"
                    "/FAQ - –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞\n")
        await self.send_message(update, f"üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–ª–∏–∑–∞.\n\n{commands}")

    async def deploy(self, update: Update, context: CallbackContext):
        await self.send_message(update, "üìã –ß–µ–∫-–ª–∏—Å—Ç —Ä–µ–ª–∏–∑–∞: ",
                                self.generate_keyboard(self.MAIN_CHECKLIST, self.session["main_checklist"], "main"))

    async def restart(self, update: Update, context: CallbackContext):
        self.session = {
            "main_checklist": [None] * len(self.MAIN_CHECKLIST),
        }
        await self.send_message(update, "üîÑ –ß–µ–∫-–ª–∏—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

    async def FAQ(self, update: Update, context: CallbackContext):
        message = ("1. ‚öôÔ∏è - in progress (–≤ —Ä–∞–±–æ—Ç–µ)"
                   "\n2. ‚úÖ - passed (–ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ)"
                   "\n3. ‚ùå -  failed (–ø—Ä–æ–π–¥–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏)")
        await self.send_message(update, f"‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–∏—Ö: \n\n{message}")

    async def handle_button_click(self, update: Update, context: CallbackContext):
        query = update.callback_query
        data = query.data
        index = int(data.split("_")[1])
        self.session["main_checklist"][index] = self.cycle_status(self.session["main_checklist"][index])
        await self.edit_message(query, "üìã –ß–µ–∫-–ª–∏—Å—Ç —Ä–µ–ª–∏–∑–∞:",
                                self.generate_keyboard(self.MAIN_CHECKLIST, self.session["main_checklist"], "main"))

    def cycle_status(self, current_status):
        statuses = [None, "in_progress", "passed", "failed"]
        return statuses[(statuses.index(current_status) + 1) % len(statuses)]
